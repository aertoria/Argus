/* Generated By:JavaCC: Do not edit this line. MetricReaderConstants.java */
/* Copyright (c) 2014, Salesforce.com, Inc.
 * All rights reserved.
 *  
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *   
 *      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 *      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *      Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
package com.salesforce.dva.argus.service.metric;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MetricReaderConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TSDB_ALLOWED_TEXT = 5;
  /** RegularExpression Id. */
  int TAGK = 6;
  /** RegularExpression Id. */
  int TAGV = 7;
  /** RegularExpression Id. */
  int TAG = 8;
  /** RegularExpression Id. */
  int DIGIT = 9;
  /** RegularExpression Id. */
  int LETTER = 10;
  /** RegularExpression Id. */
  int HYPHEN = 11;
  /** RegularExpression Id. */
  int PERIOD = 12;
  /** RegularExpression Id. */
  int UNDERSCORE = 13;
  /** RegularExpression Id. */
  int FWD_SLASH = 14;
  /** RegularExpression Id. */
  int ASTERISK = 15;
  /** RegularExpression Id. */
  int QUESTION = 16;
  /** RegularExpression Id. */
  int SQUARE_OPEN = 17;
  /** RegularExpression Id. */
  int SQUARE_CLOSE = 18;
  /** RegularExpression Id. */
  int OR = 19;
  /** RegularExpression Id. */
  int DOLLAR = 20;
  /** RegularExpression Id. */
  int POUND = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int TIME_UNIT = 23;
  /** RegularExpression Id. */
  int ANYTHING = 24;
  /** RegularExpression Id. */
  int IDENTITY = 25;
  /** RegularExpression Id. */
  int DEDUCT = 26;
  /** RegularExpression Id. */
  int HEIMDALL_TOTALAVA = 27;
  /** RegularExpression Id. */
  int HEIMDALL = 28;
  /** RegularExpression Id. */
  int HEIMDALLSCRT = 29;
  /** RegularExpression Id. */
  int HEIMDALLPODFILTER = 30;
  /** RegularExpression Id. */
  int HEIMDALLDATAGUARDTRANSFORMMAXLAG = 31;
  /** RegularExpression Id. */
  int HEIMDALL_DATAGUARD_PERCENT_PODS_MEETING_SLA = 32;
  /** RegularExpression Id. */
  int SCALE_MATCH = 33;
  /** RegularExpression Id. */
  int FILTER = 34;
  /** RegularExpression Id. */
  int P90 = 35;
  /** RegularExpression Id. */
  int HeimdallDataGuardTransform = 36;
  /** RegularExpression Id. */
  int SUM = 37;
  /** RegularExpression Id. */
  int SUM_V = 38;
  /** RegularExpression Id. */
  int DIVIDE = 39;
  /** RegularExpression Id. */
  int DIVIDE_V = 40;
  /** RegularExpression Id. */
  int DIFF = 41;
  /** RegularExpression Id. */
  int DIFF_V = 42;
  /** RegularExpression Id. */
  int MULTIPLY = 43;
  /** RegularExpression Id. */
  int SCALE = 44;
  /** RegularExpression Id. */
  int SCALE_V = 45;
  /** RegularExpression Id. */
  int AVERAGE = 46;
  /** RegularExpression Id. */
  int INTEGRAL = 47;
  /** RegularExpression Id. */
  int DERIVATIVE = 48;
  /** RegularExpression Id. */
  int MIN = 49;
  /** RegularExpression Id. */
  int MAX = 50;
  /** RegularExpression Id. */
  int AVERAGEBELOW = 51;
  /** RegularExpression Id. */
  int PERCENTILE = 52;
  /** RegularExpression Id. */
  int MOVINGAVERAGE = 53;
  /** RegularExpression Id. */
  int ZEROIFMISSINGSUM = 54;
  /** RegularExpression Id. */
  int ABSOLUTE = 55;
  /** RegularExpression Id. */
  int ALIAS = 56;
  /** RegularExpression Id. */
  int NORMALIZE = 57;
  /** RegularExpression Id. */
  int NORMALIZE_V = 58;
  /** RegularExpression Id. */
  int UNION = 59;
  /** RegularExpression Id. */
  int COUNT = 60;
  /** RegularExpression Id. */
  int GROUP = 61;
  /** RegularExpression Id. */
  int ABOVE = 62;
  /** RegularExpression Id. */
  int BELOW = 63;
  /** RegularExpression Id. */
  int PROPAGATE = 64;
  /** RegularExpression Id. */
  int MOVING = 65;
  /** RegularExpression Id. */
  int EXCLUDE = 66;
  /** RegularExpression Id. */
  int INCLUDE = 67;
  /** RegularExpression Id. */
  int HIGHEST = 68;
  /** RegularExpression Id. */
  int LOWEST = 69;
  /** RegularExpression Id. */
  int LIMIT = 70;
  /** RegularExpression Id. */
  int RANGE = 71;
  /** RegularExpression Id. */
  int FILL = 72;
  /** RegularExpression Id. */
  int FILL_CALCULATE = 73;
  /** RegularExpression Id. */
  int LOG = 74;
  /** RegularExpression Id. */
  int CULL_ABOVE = 75;
  /** RegularExpression Id. */
  int CULL_BELOW = 76;
  /** RegularExpression Id. */
  int SORT = 77;
  /** RegularExpression Id. */
  int SHIFT = 78;
  /** RegularExpression Id. */
  int DOWNSAMPLE = 79;
  /** RegularExpression Id. */
  int DEVIATION = 80;
  /** RegularExpression Id. */
  int JOIN = 81;
  /** RegularExpression Id. */
  int CONSECUTIVE = 82;
  /** RegularExpression Id. */
  int foreach = 83;
  /** RegularExpression Id. */
  int HW_FORECAST = 84;
  /** RegularExpression Id. */
  int HW_DEVIATION = 85;
  /** RegularExpression Id. */
  int ANOMALY_DENSITY = 86;
  /** RegularExpression Id. */
  int ANOMALY_ZSCORE = 87;
  /** RegularExpression Id. */
  int ANOMALY_KMEANS = 88;
  /** RegularExpression Id. */
  int ANOMALY_RPCA = 89;
  /** RegularExpression Id. */
  int GROUPBY = 90;
  /** RegularExpression Id. */
  int COLON = 91;
  /** RegularExpression Id. */
  int COMMA = 92;
  /** RegularExpression Id. */
  int LEFT_CURLY = 93;
  /** RegularExpression Id. */
  int RIGHT_CURLY = 94;
  /** RegularExpression Id. */
  int LEFT_PARENTHESIS = 95;
  /** RegularExpression Id. */
  int RIGHT_PARENTHESIS = 96;
  /** RegularExpression Id. */
  int AGGREGATOR = 97;
  /** RegularExpression Id. */
  int TIME = 98;
  /** RegularExpression Id. */
  int DOWNSAMPLER = 99;
  /** RegularExpression Id. */
  int NAMESPACE = 100;
  /** RegularExpression Id. */
  int SCOPE = 101;
  /** RegularExpression Id. */
  int METRIC = 102;
  /** RegularExpression Id. */
  int TAGS = 103;
  /** RegularExpression Id. */
  int CONSTANT = 104;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<TSDB_ALLOWED_TEXT>",
    "<TAGK>",
    "<TAGV>",
    "<TAG>",
    "<DIGIT>",
    "<LETTER>",
    "\"-\"",
    "\".\"",
    "\"_\"",
    "\"/\"",
    "\"*\"",
    "\"?\"",
    "\"[\"",
    "\"]\"",
    "\"|\"",
    "\"$\"",
    "\"#\"",
    "\"!\"",
    "<TIME_UNIT>",
    "<ANYTHING>",
    "\"IDENTITY\"",
    "\"DEDUCT\"",
    "\"HEIMDALL_TOTALAVA\"",
    "\"HEIMDALL\"",
    "\"HEIMDALLSCRT\"",
    "\"HEIMDALLPODFILTER\"",
    "\"HEIMDALLDATAGUARDTRANSFORMMAXLAG\"",
    "\"HEIMDALL_DATAGUARD_PERCENT_PODS_MEETING_SLA\"",
    "\"SCALE_MATCH\"",
    "\"FILTER\"",
    "\"P90\"",
    "\"HeimdallDataGuardTransform\"",
    "\"SUM\"",
    "\"SUM_V\"",
    "\"DIVIDE\"",
    "\"DIVIDE_V\"",
    "\"DIFF\"",
    "\"DIFF_V\"",
    "\"MULTIPLY\"",
    "\"SCALE\"",
    "\"SCALE_V\"",
    "\"AVERAGE\"",
    "\"INTEGRAL\"",
    "\"DERIVATIVE\"",
    "\"MIN\"",
    "\"MAX\"",
    "\"AVERAGEBELOW\"",
    "\"PERCENTILE\"",
    "\"MOVINGAVERAGE\"",
    "\"ZEROIFMISSINGSUM\"",
    "\"ABSOLUTE\"",
    "\"ALIAS\"",
    "\"NORMALIZE\"",
    "\"NORMALIZE_V\"",
    "\"UNION\"",
    "\"COUNT\"",
    "\"GROUP\"",
    "\"ABOVE\"",
    "\"BELOW\"",
    "\"PROPAGATE\"",
    "\"MOVING\"",
    "\"EXCLUDE\"",
    "\"INCLUDE\"",
    "\"HIGHEST\"",
    "\"LOWEST\"",
    "\"LIMIT\"",
    "\"RANGE\"",
    "\"FILL\"",
    "\"FILL_CALCULATE\"",
    "\"LOG\"",
    "\"CULL_ABOVE\"",
    "\"CULL_BELOW\"",
    "\"SORT\"",
    "\"SHIFT\"",
    "\"DOWNSAMPLE\"",
    "\"DEVIATION\"",
    "\"JOIN\"",
    "\"CONSECUTIVE\"",
    "\"foreach\"",
    "\"HW_FORECAST\"",
    "\"HW_DEVIATION\"",
    "\"ANOMALY_DENSITY\"",
    "\"ANOMALY_ZSCORE\"",
    "\"ANOMALY_KMEANS\"",
    "\"ANOMALY_RPCA\"",
    "\"GROUPBY\"",
    "\":\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "<AGGREGATOR>",
    "<TIME>",
    "<DOWNSAMPLER>",
    "<NAMESPACE>",
    "<SCOPE>",
    "<METRIC>",
    "<TAGS>",
    "<CONSTANT>",
  };

}
