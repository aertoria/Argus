/* Generated By:JavaCC: Do not edit this line. MetricReaderTokenManager.java */
/* Copyright (c) 2014, Salesforce.com, Inc.
 * All rights reserved.
 *  
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *   
 *      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 *      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *      Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
package com.salesforce.dva.argus.service.metric;
import java.io.*;
import java.util.*;
import com.salesforce.dva.argus.entity.Metric;
import com.salesforce.dva.argus.service.DiscoveryService;
import com.salesforce.dva.argus.service.TSDBService;
import com.salesforce.dva.argus.service.metric.transform.Transform;
import com.salesforce.dva.argus.service.metric.transform.TransformFactory;
import com.salesforce.dva.argus.service.metric.transform.TransformIterator;
import com.salesforce.dva.argus.service.tsdb.MetricQuery;
import com.salesforce.dva.argus.service.tsdb.MetricQuery.Aggregator;
import com.salesforce.dva.argus.system.SystemAssert;
import com.salesforce.dva.argus.system.SystemException;
import com.google.inject.Inject;
import static com.salesforce.dva.argus.system.SystemAssert.*;

/** Token Manager. */
public class MetricReaderTokenManager implements MetricReaderConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffe000000L) != 0L || (active1 & 0x3ffffffL) != 0L)
         {
            jjmatchedKind = 99;
            return 76;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffffe000000L) != 0L || (active1 & 0x3ffffffL) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
            return 76;
         }
         return -1;
      case 2:
         if ((active0 & 0x3003400000000L) != 0L || (active1 & 0x200L) != 0L)
            return 76;
         if ((active0 & 0xfffcffcbfe000000L) != 0L || (active1 & 0x3fffdffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 2;
            }
            return 76;
         }
         return -1;
      case 3:
         if ((active0 & 0x30000000000L) != 0L || (active1 & 0x11180L) != 0L)
            return 76;
         if ((active0 & 0xfffcfcebfe000000L) != 0L || (active1 & 0x3feec7fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 3;
            }
            return 76;
         }
         return -1;
      case 4:
         if ((active0 & 0x7c80182100000000L) != 0L || (active1 & 0x2002060L) != 0L)
            return 76;
         if ((active0 & 0x837ce6cafe000000L) != 0L || (active1 & 0x1fecd1fL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 4;
            }
            return 76;
         }
         return -1;
      case 5:
         if ((active0 & 0x1002c200000000L) != 0L || (active1 & 0x11L) != 0L)
            return 76;
         if ((active0 & 0x836cf409fe000000L) != 0L || (active1 & 0x3fecd0eL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 5;
            }
            return 76;
         }
         return -1;
      case 6:
         if ((active0 & 0x4300000000000L) != 0L || (active1 & 0x204000eL) != 0L)
            return 76;
         if ((active0 & 0x8378c489fe000000L) != 0L || (active1 & 0x1facd00L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 6;
            }
            return 76;
         }
         return -1;
      case 7:
         if ((active0 & 0x404480fe000000L) != 0L)
            return 76;
         if ((active0 & 0x833c800900000000L) != 0L || (active1 & 0x1facd00L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 7;
            }
            return 76;
         }
         return -1;
      case 8:
         if ((active0 & 0x8300000000000000L) != 0L || (active1 & 0x8000L) != 0L)
            return 76;
         if ((active0 & 0x3c8009f4000000L) != 0L || (active1 & 0x1fa4d00L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 8;
            }
            return 76;
         }
         return -1;
      case 9:
         if ((active0 & 0x8800000000000L) != 0L || (active1 & 0x4c00L) != 0L)
            return 76;
         if ((active0 & 0x2340009f4000000L) != 0L || (active1 & 0x1fa0100L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 9;
            return 76;
         }
         return -1;
      case 10:
         if ((active0 & 0x200000100000000L) != 0L || (active1 & 0xa0000L) != 0L)
            return 76;
         if ((active0 & 0x340008f4000000L) != 0L || (active1 & 0x1f00100L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 10;
            return 76;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000010000000L) != 0L || (active1 & 0x1100000L) != 0L)
            return 76;
         if ((active0 & 0x300008e4000000L) != 0L || (active1 & 0xe00100L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 11;
            return 76;
         }
         return -1;
      case 12:
         if ((active0 & 0x10000000000000L) != 0L)
            return 76;
         if ((active0 & 0x200008e4000000L) != 0L || (active1 & 0xe00100L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 12;
            return 76;
         }
         return -1;
      case 13:
         if ((active1 & 0xc00100L) != 0L)
            return 76;
         if ((active0 & 0x200008e4000000L) != 0L || (active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 13;
            return 76;
         }
         return -1;
      case 14:
         if ((active1 & 0x200000L) != 0L)
            return 76;
         if ((active0 & 0x200008e4000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 14;
            return 76;
         }
         return -1;
      case 15:
         if ((active0 & 0x20000000000000L) != 0L)
            return 76;
         if ((active0 & 0x8e4000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 15;
            return 76;
         }
         return -1;
      case 16:
         if ((active0 & 0x24000000L) != 0L)
            return 76;
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 16;
            return 76;
         }
         return -1;
      case 17:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 17;
            return 76;
         }
         return -1;
      case 18:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 18;
            return 76;
         }
         return -1;
      case 19:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 19;
            return 76;
         }
         return -1;
      case 20:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 20;
            return 76;
         }
         return -1;
      case 21:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 21;
            return 76;
         }
         return -1;
      case 22:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 22;
            return 76;
         }
         return -1;
      case 23:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 23;
            return 76;
         }
         return -1;
      case 24:
         if ((active0 & 0x8c0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 24;
            return 76;
         }
         return -1;
      case 25:
         if ((active0 & 0x800000000L) != 0L)
            return 76;
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 25;
            return 76;
         }
         return -1;
      case 26:
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 26;
            return 76;
         }
         return -1;
      case 27:
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 27;
            return 76;
         }
         return -1;
      case 28:
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 28;
            return 76;
         }
         return -1;
      case 29:
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 29;
            return 76;
         }
         return -1;
      case 30:
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 30;
            return 76;
         }
         return -1;
      case 31:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 31;
            return 76;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 76;
         return -1;
      case 32:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 32;
            return 76;
         }
         return -1;
      case 33:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 33;
            return 76;
         }
         return -1;
      case 34:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 34;
            return 76;
         }
         return -1;
      case 35:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 35;
            return 76;
         }
         return -1;
      case 36:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 36;
            return 76;
         }
         return -1;
      case 37:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 37;
            return 76;
         }
         return -1;
      case 38:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 38;
            return 76;
         }
         return -1;
      case 39:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 39;
            return 76;
         }
         return -1;
      case 40:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 40;
            return 76;
         }
         return -1;
      case 41:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 41;
            return 76;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 40:
         return jjStopAtPos(0, 94);
      case 41:
         return jjStopAtPos(0, 95);
      case 44:
         return jjStopAtPos(0, 91);
      case 58:
         return jjStopAtPos(0, 90);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20c4200000000000L, 0x1e00000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x20c00L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x83c000000000L, 0xc000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x180L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x2000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x8fc000000L, 0x180008L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x400002000000L, 0x4L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x230L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x13040000000000L, 0x1L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x300000000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8008000400000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x183100000000L, 0x3000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 90:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 123:
         return jjStopAtPos(0, 92);
      case 125:
         return jjStopAtPos(0, 93);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 57:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x40L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x2040000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x180100000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x40288000fc000000L, active1, 0x8000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x103c200000000L, active1, 0x1a8L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x400400000000000L, active1, 0x1e00004L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0xb10000000000000L, active1, 0x35211L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000000000000L, active1, 0x2000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x43000000000L, active1, 0xc00L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 76);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x180100000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200002000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L, active1, 0L);
      case 71:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 76);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800000fc000000L, active1, 0x12000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000040200000000L, active1, 0xd80L);
      case 77:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x20L);
      case 78:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 76);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20040L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0xb000000000000000L, active1, 0x3e00000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x328800000000000L, active1, 0x1000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000c000000000L, active1, 0x8001L);
      case 87:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4010L);
      case 88:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 76);
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x180000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x10L);
      case 70:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x82000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1080c000000000L, active1, 0x8021L);
      case 76:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x180100000000L, active1, 0xd06L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000fc000000L, active1, 0x1e00000L);
      case 78:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000002000000L, active1, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4460000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x4200000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
      case 84:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0x40200000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x2000000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8304200000000000L, active1, 0x1e08000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0fc000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 76);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0x8100300000000L, active1, 0x120008L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20040000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L);
      case 80:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L);
      case 83:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4010L);
      case 84:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 76);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6L);
      case 86:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 87:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 76);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0xd00L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000fc000000L, active1, 0x4400L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000800L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20100L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 71:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8014200000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000000000L, active1, 0x1e00000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x80000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 84:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 86:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x100100000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x8010400000000000L, active1, 0x100L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 76);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0x80800L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000000000000L, active1, 0x108000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x400fc000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000100000000L, active1, 0x4000L);
      case 84:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0x48800002000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L);
      case 86:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 76);
         break;
      case 89:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1e00000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 76);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0x100000L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 76);
         break;
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x28800000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 76);
         return jjMoveStringLiteralDfa8_0(active0, 0xf4000000L, active1, 0x900L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8400L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x20000L);
      case 86:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 76);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 76);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 76);
         break;
      case 90:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1e00000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x840000000L, active1, 0x200000L);
      case 69:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 76);
         return jjMoveStringLiteralDfa9_0(active0, 0x214000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 75:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x4000L);
      case 78:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 79, 76);
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000010000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0x100000L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x400L);
      case 90:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x84000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x110000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0L);
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 76);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 76);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 76);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 78, 76);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0x480000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
      case 87:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 75, 76);
         break;
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000080000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1400000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0L);
      case 69:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 81, 76);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000L);
      case 72:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 76);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000004000000L, active1, 0x100000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0L);
      case 84:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 83, 76);
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0L);
      case 86:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 57, 76);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 88, 76);
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0x800100L);
      case 70:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 84, 76);
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000L);
      case 84:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 28, 76);
         return jjMoveStringLiteralDfa12_0(active0, 0x84000000L, active1, 0L);
      case 87:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 76);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x84000000L, active1, 0L);
      case 69:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 52, 76);
         break;
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000840000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L, active1, 0x200000L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 72, 76);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 86, 76);
         break;
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x24000000L, active1, 0L);
      case 83:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(13, 87, 76);
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0x44000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000080000000L, active1, 0L);
      case 89:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(14, 85, 76);
         break;
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L);
      case 69:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L);
      case 77:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 53, 76);
         break;
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L);
      case 86:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(16, 26, 76);
         break;
      case 68:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000L);
      case 82:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(16, 29, 76);
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000L);
      case 84:
         return jjMoveStringLiteralDfa18_0(active0, 0x840000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000L);
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000L);
      case 80:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000L);
      case 78:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa22_0(active0, 0x80000000L);
      case 83:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa23_0(active0, 0x80000000L);
      case 70:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000000L);
      case 102:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa24_0(active0, 0x80000000L);
      case 79:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa25_0(active0, 0x80000000L);
      case 82:
         return jjMoveStringLiteralDfa25_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa25_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa26_0(active0, 0x40000000L);
      case 84:
         return jjMoveStringLiteralDfa26_0(active0, 0x80000000L);
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(25, 35, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa27_0(active0, 0x40000000L);
      case 95:
         return jjMoveStringLiteralDfa27_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa28_0(active0, 0x40000000L);
      case 80:
         return jjMoveStringLiteralDfa28_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa29_0(active0, 0x80000000L);
      case 88:
         return jjMoveStringLiteralDfa29_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa30_0(active0, 0x80000000L);
      case 76:
         return jjMoveStringLiteralDfa30_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa31_0(active0, 0x40000000L);
      case 83:
         return jjMoveStringLiteralDfa31_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(31, 30, 76);
         break;
      case 95:
         return jjMoveStringLiteralDfa32_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0, 0L);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa33_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0, 0L);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa34_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0, 0L);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa35_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0, 0L);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa36_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0, 0L);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0, 0L);
      return 36;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa37_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0, 0L);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0, 0L);
      return 37;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa38_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0, 0L);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0, 0L);
      return 38;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa39_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0, 0L);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0, 0L);
      return 39;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa40_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0, 0L);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0, 0L);
      return 40;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa41_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0, 0L);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0, 0L);
      return 41;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa42_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0, 0L);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0, 0L);
      return 42;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(42, 31, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(41, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 76;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 76:
                  if ((0x83ffe40000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  else if (curChar == 61)
                     jjCheckNAdd(71);
                  if ((0x83ffe40000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(68);
                  }
                  if ((0x83ffe40000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAdd(67);
                  }
                  if ((0x83ffe40000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(66);
                  }
                  break;
               case 2:
                  if ((0x83ffe40000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(18);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     jjCheckNAddStates(5, 7);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(15);
                  break;
               case 14:
                  if (curChar == 45)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if (curChar == 35)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 35 && kind > 103)
                     kind = 103;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAddStates(5, 7);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if (curChar == 45)
                     jjAddStates(8, 12);
                  break;
               case 65:
                  if ((0x83ffe40000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(0, 4);
                  break;
               case 66:
                  if ((0x83ffe40000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0x83ffe40000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x83ffe40000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x83ffe40000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 61)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x83ffe40000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 44)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x83ffe40000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar == 61)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x83ffe40000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(72, 75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 76:
                  if ((0x17fffffeaffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  if ((0x17fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(68);
                  }
                  if ((0x17fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAdd(67);
                  }
                  if ((0x17fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(66);
                  }
                  break;
               case 2:
                  if ((0x17fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(0, 4);
                  }
                  if (curChar == 109)
                     jjAddStates(13, 16);
                  else if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 103 && kind > 96)
                     kind = 96;
                  break;
               case 1:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 109 && kind > 96)
                     kind = 96;
                  break;
               case 4:
               case 9:
                  if (curChar == 117)
                     jjCheckNAdd(3);
                  break;
               case 5:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 118 && kind > 96)
                     kind = 96;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 16:
                  if ((0x8211000000000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 18:
                  jjAddStates(17, 18);
                  break;
               case 20:
                  if (curChar == 109)
                     jjAddStates(13, 16);
                  break;
               case 21:
                  if (curChar == 110 && kind > 96)
                     kind = 96;
                  break;
               case 22:
               case 25:
                  if (curChar == 105)
                     jjCheckNAdd(21);
                  break;
               case 23:
                  if (curChar == 120 && kind > 96)
                     kind = 96;
                  break;
               case 24:
               case 29:
                  if (curChar == 97)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 36:
                  if ((0x8211000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if (curChar == 103 && kind > 98)
                     kind = 98;
                  break;
               case 39:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 109 && kind > 98)
                     kind = 98;
                  break;
               case 42:
               case 47:
                  if (curChar == 117)
                     jjCheckNAdd(41);
                  break;
               case 43:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 118 && kind > 98)
                     kind = 98;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 48:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 109)
                     jjAddStates(19, 22);
                  break;
               case 53:
                  if (curChar == 110 && kind > 98)
                     kind = 98;
                  break;
               case 54:
               case 57:
                  if (curChar == 105)
                     jjCheckNAdd(53);
                  break;
               case 55:
                  if (curChar == 120 && kind > 98)
                     kind = 98;
                  break;
               case 56:
               case 61:
                  if (curChar == 97)
                     jjCheckNAdd(55);
                  break;
               case 58:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x17fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(0, 4);
                  break;
               case 66:
                  if ((0x17fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0x17fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x17fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x17fffffeaffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 71:
                  if ((0x17fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
                  if ((0x17fffffeaffffffeL & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 75:
                  if ((0x17fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(72, 75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 76 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   66, 67, 68, 69, 70, 34, 35, 36, 40, 43, 46, 51, 52, 22, 24, 28, 
   32, 18, 19, 54, 56, 60, 64, 73, 74, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\111\104\105\116\124\111\124\131", "\110\105\111\115\104\101\114\114\137\124\117\124\101\114\101\126\101", 
"\110\105\111\115\104\101\114\114", "\110\105\111\115\104\101\114\114\123\103\122\124", 
"\110\105\111\115\104\101\114\114\120\117\104\106\111\114\124\105\122", 
"\110\105\111\115\104\101\114\114\104\101\124\101\107\125\101\122\104\124\122\101\116\123\106\117\122\115\115\101\130\114\101\107", 
"\110\105\111\115\104\101\114\114\137\104\101\124\101\107\125\101\122\104\137\120\105\122\103\105\116\124\137\120\117\104\123\137\115\105\105\124\111\116\107\137\123\114\101", "\123\103\101\114\105\137\115\101\124\103\110", "\106\111\114\124\105\122", 
"\120\71\60", 
"\110\145\151\155\144\141\154\154\104\141\164\141\107\165\141\162\144\124\162\141\156\163\146\157\162\155", "\123\125\115", "\123\125\115\137\126", "\104\111\126\111\104\105", 
"\104\111\126\111\104\105\137\126", "\104\111\106\106", "\104\111\106\106\137\126", 
"\115\125\114\124\111\120\114\131", "\123\103\101\114\105", "\123\103\101\114\105\137\126", 
"\101\126\105\122\101\107\105", "\111\116\124\105\107\122\101\114", 
"\104\105\122\111\126\101\124\111\126\105", "\115\111\116", "\115\101\130", 
"\101\126\105\122\101\107\105\102\105\114\117\127", "\120\105\122\103\105\116\124\111\114\105", 
"\115\117\126\111\116\107\101\126\105\122\101\107\105", "\132\105\122\117\111\106\115\111\123\123\111\116\107\123\125\115", 
"\101\102\123\117\114\125\124\105", "\101\114\111\101\123", "\116\117\122\115\101\114\111\132\105", 
"\116\117\122\115\101\114\111\132\105\137\126", "\125\116\111\117\116", "\103\117\125\116\124", "\107\122\117\125\120", 
"\101\102\117\126\105", "\102\105\114\117\127", "\120\122\117\120\101\107\101\124\105", 
"\115\117\126\111\116\107", "\105\130\103\114\125\104\105", "\111\116\103\114\125\104\105", 
"\110\111\107\110\105\123\124", "\114\117\127\105\123\124", "\114\111\115\111\124", "\122\101\116\107\105", 
"\106\111\114\114", "\106\111\114\114\137\103\101\114\103\125\114\101\124\105", "\114\117\107", 
"\103\125\114\114\137\101\102\117\126\105", "\103\125\114\114\137\102\105\114\117\127", "\123\117\122\124", 
"\123\110\111\106\124", "\104\117\127\116\123\101\115\120\114\105", 
"\104\105\126\111\101\124\111\117\116", "\112\117\111\116", "\103\117\116\123\105\103\125\124\111\126\105", 
"\146\157\162\145\141\143\150", "\110\127\137\106\117\122\105\103\101\123\124", 
"\110\127\137\104\105\126\111\101\124\111\117\116", "\101\116\117\115\101\114\131\137\104\105\116\123\111\124\131", 
"\101\116\117\115\101\114\131\137\132\123\103\117\122\105", "\101\116\117\115\101\114\131\137\113\115\105\101\116\123", 
"\101\116\117\115\101\114\131\137\122\120\103\101", "\107\122\117\125\120\102\131", "\72", "\54", "\173", "\175", "\50", "\51", 
null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffe000001L, 0xffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[76];
private final int[] jjstateSet = new int[152];
protected char curChar;
/** Constructor. */
public MetricReaderTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MetricReaderTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 76; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000400L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
